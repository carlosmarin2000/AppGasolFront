[{"C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\index.js":"1","C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\reportWebVitals.js":"2","C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":1522,"mtime":1611210168299,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1jncn9a",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\index.js",[],["15","16"],"C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\reportWebVitals.js",[],"C:\\Users\\cadam\\Documents\\DesarrolloReact\\AppGasolFront\\src\\App.js",["17","18","19"],{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":21,"column":15,"nodeType":"26","endLine":29,"endColumn":6},{"ruleId":"27","severity":1,"message":"28","line":27,"column":7,"nodeType":"29","messageId":"30","endLine":27,"endColumn":12},{"ruleId":"24","severity":1,"message":"31","line":27,"column":15,"nodeType":"32","endLine":27,"endColumn":26},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'datos' is assigned a value but never used.","Identifier","unusedVar","Assignments to the 'datos' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","no-global-assign","no-unsafe-negation"]